// <auto-generated />
using System;
using LLT.PrintTickets.PoC.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LLT.PrintTickets.PoC.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LLT.PrintTickets.PoC.Domain.Buyers.Buyer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("email");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("last_name");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_buyers");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_buyers_email");

                    b.ToTable("buyers", (string)null);
                });

            modelBuilder.Entity("LLT.PrintTickets.PoC.Domain.Tickets.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Home")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("home");

                    b.Property<bool>("IsPrinted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_printed");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.Property<DateTime?>("PrintedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("printed_at");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Visitor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("visitor");

                    b.HasKey("Id")
                        .HasName("pk_tickets");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("ix_tickets_owner_id");

                    b.ToTable("tickets", (string)null);
                });

            modelBuilder.Entity("LLT.PrintTickets.PoC.Domain.Tickets.Ticket", b =>
                {
                    b.HasOne("LLT.PrintTickets.PoC.Domain.Buyers.Buyer", null)
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tickets_buyers_owner_id");

                    b.OwnsOne("LLT.PrintTickets.PoC.Domain.Shared.Money", "Price", b1 =>
                        {
                            b1.Property<Guid>("TicketId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric")
                                .HasColumnName("price_amount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("price_currency");

                            b1.HasKey("TicketId");

                            b1.ToTable("tickets");

                            b1.WithOwner()
                                .HasForeignKey("TicketId")
                                .HasConstraintName("fk_tickets_tickets_id");
                        });

                    b.OwnsOne("LLT.PrintTickets.PoC.Domain.Tickets.MatchDate", "MatchDate", b1 =>
                        {
                            b1.Property<Guid>("TicketId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<DateOnly>("Day")
                                .HasColumnType("date")
                                .HasColumnName("match_day");

                            b1.Property<TimeOnly>("Time")
                                .HasColumnType("time without time zone")
                                .HasColumnName("match_time");

                            b1.HasKey("TicketId");

                            b1.ToTable("tickets");

                            b1.WithOwner()
                                .HasForeignKey("TicketId")
                                .HasConstraintName("fk_tickets_tickets_id");
                        });

                    b.Navigation("MatchDate")
                        .IsRequired();

                    b.Navigation("Price");
                });
#pragma warning restore 612, 618
        }
    }
}
